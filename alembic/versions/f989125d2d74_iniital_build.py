"""Iniital build

Revision ID: f989125d2d74
Revises: 
Create Date: 2024-02-28 17:29:28.114877

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f989125d2d74"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "csst_experiments",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("file_name", sa.Text(), nullable=True),
        sa.Column("version", sa.Text(), nullable=False),
        sa.Column("experiment_details", sa.Text(), nullable=True),
        sa.Column("experiment_number", sa.Text(), nullable=True),
        sa.Column("experimenter", sa.Text(), nullable=True),
        sa.Column("project", sa.Text(), nullable=True),
        sa.Column("lab_journal", sa.Text(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("start_of_experiment", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "csst_properties",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("unit", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "csst_temperature_programs",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("block", sa.Text(), nullable=False),
        sa.Column(
            "solvent_tune", postgresql.ARRAY(sa.JSON(), dimensions=1), nullable=False
        ),
        sa.Column(
            "sample_load", postgresql.ARRAY(sa.JSON(), dimensions=1), nullable=False
        ),
        sa.Column(
            "experiment", postgresql.ARRAY(sa.JSON(), dimensions=1), nullable=False
        ),
        sa.Column("hash", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "polymers",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("smiles", sa.Text(), nullable=True),
        sa.Column("fingerprint", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("smiles"),
    )
    op.create_table(
        "solvents",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("smiles", sa.Text(), nullable=False),
        sa.Column("fingerprint", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("smiles"),
    )
    op.create_table(
        "csst_experiment_property_multiple_values",
        sa.Column("csst_property_id", sa.Integer(), nullable=False),
        sa.Column("csst_experiment_id", sa.Integer(), nullable=False),
        sa.Column("array_index", sa.Integer(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["csst_experiment_id"],
            ["csst_experiments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["csst_property_id"],
            ["csst_properties.id"],
        ),
        sa.PrimaryKeyConstraint(
            "csst_property_id", "csst_experiment_id", "array_index", "value"
        ),
    )
    op.create_table(
        "csst_experiment_property_single_values",
        sa.Column("csst_property_id", sa.Integer(), nullable=False),
        sa.Column("csst_experiment_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["csst_experiment_id"],
            ["csst_experiments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["csst_property_id"],
            ["csst_properties.id"],
        ),
        sa.PrimaryKeyConstraint("csst_property_id", "csst_experiment_id", "value"),
    )
    op.create_table(
        "lab_polymers",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pol_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("number_average_mw_min", sa.Float(), nullable=True),
        sa.Column("number_average_mw_max", sa.Float(), nullable=True),
        sa.Column("supplier", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["pol_id"],
            ["polymers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "lab_solvents",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("sol_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("percent_purity", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["sol_id"],
            ["solvents.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "csst_reactors",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("lab_sol_id", sa.Integer(), nullable=False),
        sa.Column("lab_pol_id", sa.Integer(), nullable=False),
        sa.Column("conc", sa.Float(), nullable=False),
        sa.Column("conc_unit", sa.Text(), nullable=False),
        sa.Column("csst_temperature_program_id", sa.Integer(), nullable=False),
        sa.Column("csst_experiment_id", sa.Integer(), nullable=False),
        sa.Column("reactor_number", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["csst_experiment_id"],
            ["csst_experiments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["csst_temperature_program_id"],
            ["csst_temperature_programs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["lab_pol_id"],
            ["lab_polymers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["lab_sol_id"],
            ["lab_solvents.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "csst_reactor_processed_temperature_values",
        sa.Column("csst_reactor_id", sa.Integer(), nullable=False),
        sa.Column("average_temperature", sa.Float(), nullable=False),
        sa.Column("temperature_range", sa.Float(), nullable=False),
        sa.Column("average_transmission", sa.Float(), nullable=False),
        sa.Column("median_transmission", sa.Float(), nullable=False),
        sa.Column("transmission_std", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["csst_reactor_id"],
            ["csst_reactors.id"],
        ),
        sa.PrimaryKeyConstraint(
            "csst_reactor_id", "average_temperature", "temperature_range"
        ),
    )
    op.create_table(
        "csst_reactor_property_multiple_values",
        sa.Column("csst_property_id", sa.Integer(), nullable=False),
        sa.Column("csst_reactor_id", sa.Integer(), nullable=False),
        sa.Column("array_index", sa.Integer(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["csst_property_id"],
            ["csst_properties.id"],
        ),
        sa.ForeignKeyConstraint(
            ["csst_reactor_id"],
            ["csst_reactors.id"],
        ),
        sa.PrimaryKeyConstraint(
            "csst_property_id", "csst_reactor_id", "array_index", "value"
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("csst_reactor_property_multiple_values")
    op.drop_table("csst_reactor_processed_temperature_values")
    op.drop_table("csst_reactors")
    op.drop_table("lab_solvents")
    op.drop_table("lab_polymers")
    op.drop_table("csst_experiment_property_single_values")
    op.drop_table("csst_experiment_property_multiple_values")
    op.drop_table("solvents")
    op.drop_table("polymers")
    op.drop_table("csst_temperature_programs")
    op.drop_table("csst_properties")
    op.drop_table("csst_experiments")
    # ### end Alembic commands ###
